
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountsScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  roles: 'roles',
  active: 'active',
  created_by: 'created_by',
  created_at: 'created_at',
  contact_id: 'contact_id',
  change_log: 'change_log',
  notes: 'notes',
  setup_token: 'setup_token',
  dealer_group_id: 'dealer_group_id'
};

exports.Prisma.ApplicantsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  is_company: 'is_company',
  first_name_1: 'first_name_1',
  last_name_1: 'last_name_1',
  first_name_2: 'first_name_2',
  last_name_2: 'last_name_2',
  address_1: 'address_1',
  address_2: 'address_2',
  city: 'city',
  province: 'province',
  postal_code: 'postal_code',
  email_1: 'email_1',
  email_2: 'email_2',
  phone_number_1: 'phone_number_1',
  phone_number_2: 'phone_number_2',
  notes: 'notes',
  policy_ids: 'policy_ids',
  customer_number: 'customer_number'
};

exports.Prisma.Cancelation_detailsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  policy_id: 'policy_id',
  underwriting_clawback: 'underwriting_clawback',
  dealership_clawback: 'dealership_clawback',
  dealer_group_clawback: 'dealer_group_clawback',
  MGA_clawback: 'MGA_clawback',
  referral_clawback: 'referral_clawback',
  clawback_type: 'clawback_type',
  fee: 'fee',
  refund_factor: 'refund_factor',
  clawback_total: 'clawback_total',
  cancellation_reason: 'cancellation_reason'
};

exports.Prisma.Claims_detailsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  completed_at: 'completed_at',
  from_customer: 'from_customer',
  from_policy: 'from_policy',
  documents: 'documents',
  active: 'active',
  last_update: 'last_update',
  validated_fields: 'validated_fields',
  change_log: 'change_log'
};

exports.Prisma.ContactsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  assistant_id: 'assistant_id',
  first_name: 'first_name',
  last_name: 'last_name',
  nickname: 'nickname',
  primary_email: 'primary_email',
  secondary_email: 'secondary_email',
  primary_phone_number: 'primary_phone_number',
  secondary_phone_number: 'secondary_phone_number',
  address_1: 'address_1',
  address_2: 'address_2',
  city: 'city',
  province: 'province',
  postal_code: 'postal_code',
  birthday: 'birthday',
  linked_account: 'linked_account',
  notes: 'notes',
  change_log: 'change_log',
  dealer_group_id: 'dealer_group_id'
};

exports.Prisma.Dealer_groupsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  dealer_margin: 'dealer_margin',
  dealer_group_split: 'dealer_group_split',
  referral_fee_rate: 'referral_fee_rate',
  full_name: 'full_name',
  nickname: 'nickname',
  notes: 'notes',
  change_log: 'change_log',
  address_1: 'address_1',
  address_2: 'address_2',
  postal_code: 'postal_code',
  secondary_contact_ids: 'secondary_contact_ids',
  primary_contact_ids: 'primary_contact_ids'
};

exports.Prisma.DealershipsScalarFieldEnum = {
  id: 'id',
  dealer_group_id: 'dealer_group_id',
  created_at: 'created_at',
  name: 'name',
  nickname: 'nickname',
  address_1: 'address_1',
  address_2: 'address_2',
  city: 'city',
  province: 'province',
  postal_code: 'postal_code',
  licensed_seller: 'licensed_seller',
  primary_contact_ids: 'primary_contact_ids',
  secondary_contact_ids: 'secondary_contact_ids',
  products: 'products',
  notes: 'notes',
  change_logs: 'change_logs'
};

exports.Prisma.Dealerships_dealer_groupsScalarFieldEnum = {
  dealership_id: 'dealership_id',
  dealer_group_id: 'dealer_group_id',
  active: 'active'
};

exports.Prisma.PoliciesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  notes: 'notes',
  seller_id: 'seller_id',
  dealership_id: 'dealership_id',
  dealer_group_id: 'dealer_group_id',
  created_by_id: 'created_by_id',
  applicant_id: 'applicant_id',
  price_calculation_data: 'price_calculation_data',
  pricing_details: 'pricing_details',
  product_pricing_details: 'product_pricing_details',
  cancelation_details: 'cancelation_details',
  policy_status: 'policy_status',
  products: 'products',
  policy_term: 'policy_term',
  effective_date: 'effective_date',
  date_terminated: 'date_terminated',
  province: 'province',
  jwt_token: 'jwt_token',
  credit_card_token: 'credit_card_token',
  policy_payment_method: 'policy_payment_method',
  total_price: 'total_price',
  transfered_from: 'transfered_from',
  transfered_to: 'transfered_to',
  primary_insurer_id: 'primary_insurer_id',
  primary_insurer_policy_number: 'primary_insurer_policy_number',
  vehicle_details: 'vehicle_details',
  claims_details_id: 'claims_details_id'
};

exports.Prisma.Price_calculation_dataScalarFieldEnum = {
  id: 'id',
  policy_id: 'policy_id',
  value_appreciation_rate: 'value_appreciation_rate',
  depreciation_model: 'depreciation_model',
  vehicle_state: 'vehicle_state',
  vehicle_state_factor: 'vehicle_state_factor',
  vehicle_category: 'vehicle_category',
  vehicle_category_factor: 'vehicle_category_factor',
  zone: 'zone',
  zone_factor: 'zone_factor',
  negative_equity_ratio_factor: 'negative_equity_ratio_factor',
  interest_rate_factor: 'interest_rate_factor',
  model_year_factor: 'model_year_factor',
  provincial_factor: 'provincial_factor',
  powertrain_factor: 'powertrain_factor',
  MGA_adjustment: 'MGA_adjustment',
  seller_adjustment: 'seller_adjustment',
  referral_adjustment: 'referral_adjustment',
  administration_fee: 'administration_fee',
  vehicle_purchase_method: 'vehicle_purchase_method',
  total_debt: 'total_debt',
  debt_interest_rate: 'debt_interest_rate',
  debt_term: 'debt_term',
  residual_value: 'residual_value',
  loan_payment_monthly: 'loan_payment_monthly',
  negative_equity: 'negative_equity',
  lien_holder_id: 'lien_holder_id',
  loan_number: 'loan_number'
};

exports.Prisma.Pricing_detailsScalarFieldEnum = {
  id: 'id',
  policy_id: 'policy_id',
  products: 'products',
  licenced_seller: 'licenced_seller',
  coverage_term: 'coverage_term',
  underwriting_premium: 'underwriting_premium',
  MGA_premium: 'MGA_premium',
  seller_commission: 'seller_commission',
  IPT: 'IPT',
  dealership_referral_fee: 'dealership_referral_fee',
  dealership_referral_GST: 'dealership_referral_GST',
  dealer_group_referral_fee: 'dealer_group_referral_fee',
  dealer_group_referral_GST: 'dealer_group_referral_GST',
  cc_surcharge: 'cc_surcharge',
  transfer_credit: 'transfer_credit',
  retail_price: 'retail_price',
  retail_tax: 'retail_tax',
  retail_price_after_tax: 'retail_price_after_tax',
  product_pricing_details: 'product_pricing_details'
};

exports.Prisma.Product_price_detailsScalarFieldEnum = {
  id: 'id',
  policy_id: 'policy_id',
  pricing_details_id: 'pricing_details_id',
  product_type: 'product_type',
  underwriting_premium: 'underwriting_premium',
  MGA_premium: 'MGA_premium',
  seller_commission: 'seller_commission',
  IPT: 'IPT',
  dealership_referral_fee: 'dealership_referral_fee',
  dealership_referral_GST: 'dealership_referral_GST',
  dealer_group_referral_fee: 'dealer_group_referral_fee',
  dealer_group_referral_GST: 'dealer_group_referral_GST',
  cc_surcharge: 'cc_surcharge',
  retail_price: 'retail_price',
  retail_tax: 'retail_tax',
  retail_price_after_tax: 'retail_price_after_tax'
};

exports.Prisma.Product_refund_detailsScalarFieldEnum = {
  id: 'id',
  policy_id: 'policy_id',
  cancelation_details_id: 'cancelation_details_id',
  product_type: 'product_type',
  underwriting_clawback: 'underwriting_clawback',
  dealership_clawback: 'dealership_clawback',
  dealer_group_clawback: 'dealer_group_clawback',
  MGA_clawback: 'MGA_clawback',
  referral_clawback: 'referral_clawback'
};

exports.Prisma.Quick_quotesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  vin: 'vin',
  applicant: 'applicant',
  contactInfo: 'contactInfo',
  vehicle: 'vehicle',
  debtInfo: 'debtInfo',
  productInfo: 'productInfo',
  paymentInfo: 'paymentInfo',
  name: 'name',
  currentStep: 'currentStep',
  completed: 'completed',
  seller_id: 'seller_id'
};

exports.Prisma.Seller_dealershipsScalarFieldEnum = {
  seller_id: 'seller_id',
  dealership_id: 'dealership_id'
};

exports.Prisma.Vehicle_detailsScalarFieldEnum = {
  id: 'id',
  from_policy: 'from_policy',
  vin: 'vin',
  make: 'make',
  model: 'model',
  series: 'series',
  body: 'body',
  MSRP: 'MSRP',
  bought_vehicle_value: 'bought_vehicle_value',
  vehicle_state: 'vehicle_state',
  vehicle_purchase_year: 'vehicle_purchase_year',
  odometer: 'odometer',
  model_year: 'model_year'
};

exports.Prisma.Action_queueScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  run_date: 'run_date',
  repeating: 'repeating',
  command: 'command',
  interval: 'interval',
  data: 'data'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  accounts: 'accounts',
  applicants: 'applicants',
  cancelation_details: 'cancelation_details',
  claims_details: 'claims_details',
  contacts: 'contacts',
  dealer_groups: 'dealer_groups',
  dealerships: 'dealerships',
  dealerships_dealer_groups: 'dealerships_dealer_groups',
  policies: 'policies',
  price_calculation_data: 'price_calculation_data',
  pricing_details: 'pricing_details',
  product_price_details: 'product_price_details',
  product_refund_details: 'product_refund_details',
  quick_quotes: 'quick_quotes',
  seller_dealerships: 'seller_dealerships',
  vehicle_details: 'vehicle_details',
  action_queue: 'action_queue'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
